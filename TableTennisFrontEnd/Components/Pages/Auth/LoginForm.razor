@using Microsoft.AspNetCore.Components.Authorization
@using TableTennisFrontEnd.Authentication
@using TableTennisShared.DTO.User
@using TableTennisShared.DTO.JWT
@using System.Net.Http.Json
@inject ApiClient ApiClient
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager

<EditForm method="post" FormName="create" Model="LoginRequest" OnValidSubmit="Submit" Enhance>
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" />
    <div class="form-group">
        <label for="email" class="form-label">Email address</label>
        <InputText type="email" class="form-control" @bind-Value="LoginRequest.Email" placeholder="Enter email" />
        <ValidationMessage For="() => LoginRequest.Email" class="text-danger" />
    </div>
    <div class="form-group my-3">
        <label for="password" class="form-label">Password</label>
        <InputText type="password" class="form-control" @bind-Value="LoginRequest.Password" placeholder="Enter password" />
        <ValidationMessage For="() => LoginRequest.Password" class="text-danger" />
    </div>
    <h5 class="text-danger">@ErrorMessage</h5>
    <button type="submit" class="btn btn-primary bg-dark" disabled="@IsLoading">Submit</button>
</EditForm>

@code {

    [SupplyParameterFromForm]
    public LoginRequestDto LoginRequest { get; set; } = new();

    [Parameter]
    public EventCallback<bool> SpinnerChanged { get; set; }

    public string ErrorMessage { get; set; } = string.Empty;
    private bool _isLoading;
    public bool IsLoading
    {
        get => _isLoading;
        set
        {
            if (_isLoading != value)
            {
                _isLoading = value;
                _ = SpinnerChanged.InvokeAsync(_isLoading);
                StateHasChanged();
            }
        }
    }

    private async Task Submit()
    {
        IsLoading = true;
        ErrorMessage = "";
        try
        {
            var response = await ApiClient.PostJsonAsyncWithResponseModel<LoginRequestDto, LoginResponseDto>("/auth/login", LoginRequest);
            if (response != null)
            {
                await ((CustomAuthStateProvider)AuthStateProvider).NotifyUserAuthentication(response.AccessToken);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                ErrorMessage = "Something went wrong";
            }
        }
        catch (Exception e)
        {
            ErrorMessage = "Something went wrong, please try again later.";
        }

        IsLoading = false;
    }
}
