@using TableTennisShared.DTO.User
@using TableTennisShared.DTO.JWT
@using System.Net.Http.Json
@inject HttpClient Http
@inject AntiforgeryStateProvider AntiForgery
@rendermode InteractiveServer

<EditForm method="post" FormName="create" Model="RegisterRequest" OnValidSubmit="Submit" Enhance>
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" />
    <div class="form-group">
        <label for="firstName" class="form-label">First name</label>
        <InputText type="text" class="form-control" @bind-Value="RegisterRequest.FirstName" placeholder="Enter first name" />
        <ValidationMessage For="() => RegisterRequest.FirstName" class="text-danger" />
    </div>
    <div class="form-group mt-2">
        <label for="email" class="form-label">Last name</label>
        <InputText type="text" class="form-control" @bind-Value="RegisterRequest.LastName" placeholder="Enter last name" />
        <ValidationMessage For="() => RegisterRequest.LastName" class="text-danger" />
    </div>
    <div class="form-group mt-2">
        <label for="email" class="form-label">Email address</label>
        <InputText type="email" class="form-control" @bind-Value="RegisterRequest.Email" placeholder="Enter email" />
        <ValidationMessage For="() => RegisterRequest.Email" class="text-danger" />
    </div>
    <div class="form-group my-2">
        <label for="password" class="form-label">Password</label>
        <InputText type="password" class="form-control" @bind-Value="RegisterRequest.Password" placeholder="Enter password" />
        <ValidationMessage For="() => RegisterRequest.Password" class="text-danger" />
    </div>
    <button type="submit" class="btn btn-primary bg-dark" disabled="@IsLoading">Submit</button>
</EditForm>

@code {
    [SupplyParameterFromForm]
    public RegisterDto RegisterRequest { get; set; } = new();

    [Parameter]
    public EventCallback<bool> SpinnerChanged { get; set; }

    private bool _isLoading;
    public bool IsLoading
    {
        get => _isLoading;
        set
        {
            if (_isLoading != value)
            {
                _isLoading = value;
                _ = SpinnerChanged.InvokeAsync(_isLoading);
                StateHasChanged();
            }
        }
    }

    private async Task Submit()
    {
        IsLoading = true;
        var response = await Http.PostAsJsonAsync("https://localhost:7149/user/register", RegisterRequest);
        if (response.IsSuccessStatusCode)
        {
            // var authResult = await response.Content.ReadFromJsonAsync<LoginResponseDto>();

        }
        else
        {

        }

        IsLoading = false;
    }
}
