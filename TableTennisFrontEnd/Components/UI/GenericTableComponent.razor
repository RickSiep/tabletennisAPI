@typeparam TItem
@using Microsoft.AspNetCore.Components.Authorization;
@using TableTennisFrontEnd.Authentication
@using Microsoft.AspNetCore.Authorization
@using TableTennisShared.DTO.Match
@using System
@using System.Collections.Generic
@using System.Linq
@using System.Threading.Tasks;
@inject ApiClient ApiClient

@if (IsLoading)
{
    <div class="position-absolute top-50 start-50 translate-middle bg-black bg-opacity-50 w-100 h-100 d-flex justify-content-center align-items-center">
        <div class="spinner-border" role="status"></div>
    </div>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                @HeaderTemplate
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Items)
            {
                <tr>
                    @RowTemplate(item)
                </tr>
            }
        </tbody>
    </table>
    <div class="d-flex flex-column justify-content-end align-items-end">
        <div class="mb-2">
            <p>Page: @_pageIndex</p>
        </div>
        <div>
            @if (_pageIndex != 1)
            {
                <button @onclick="() => UpdateItems(GetPreviousPageIndex())" class="btn-outline-info btn">←</button>
            }
            @foreach (var index in _pages)
            {
                <button @onclick="() => UpdateItems(index)" class="btn @(IsPageIndex(index) ? "btn-primary" : "btn-outline-info") mx-1" disabled=@IsPageIndex(index)>@index</button>
            }
            @if (_pageIndex * _pageSize < TotalCount)
            {
                <button @onclick="() => UpdateItems(GetNextPageIndex())" class="btn-outline-info btn">→</button>
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public IEnumerable<TItem> Items { get; set; } = [];

    [Parameter]
    public int TotalCount { get; set; }

    [Parameter]
    public RenderFragment<TItem> RowTemplate { get; set; } = default!;

    [Parameter]
    public RenderFragment HeaderTemplate { get; set; } = default!;

    [Parameter]
    public EventCallback<int> OnPageChanged { get; set; }

    public bool IsLoading { get; set; }
    private int _pageSize = 5;
    private int _pageIndex = 1;
    private List<int> _pages = [];

    private bool IsPageIndex(int index) => index == _pageIndex;
    private int GetPreviousPageIndex() => _pageIndex == 1 ? _pageIndex : _pageIndex - 1;
    private int GetNextPageIndex() => _pageIndex == (TotalCount / _pageSize) + 1 ? _pageIndex : _pageIndex + 1;

    protected override async Task OnInitializedAsync()
    {
        await UpdateItems(_pageIndex);

        await base.OnInitializedAsync();
    }

    public async Task UpdateItems(int pageIndex)
    {
        IsLoading = true;
        _pageIndex = pageIndex;
        await OnPageChanged.InvokeAsync(_pageIndex);
        CalculatePages();
        IsLoading = false;
        StateHasChanged();
    }

    private void CalculatePages()
    {
        _pages = new List<int>
        {
            _pageIndex > 1 ? _pageIndex - 1 : _pageIndex,
            _pageIndex,
            _pageIndex * _pageSize < TotalCount ? _pageIndex + 1 : _pageIndex
        }
        .Distinct().ToList();
    }
}
